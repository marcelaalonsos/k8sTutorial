Scale Your App

Scalling an application
- is accomplished by changing the number of replicas in a deployment
- Scaling out a Deployment will ensure new Pods are created and scheduled to Nodes with available resources. Scaling will increase the number of Pods to the new desired state
- Services have an integrated load-balancer that will distribute network traffic to all Pods of an exposed Deployment
- Services will monitor continuously the running Pods using endpoints, to ensure the traffic is sent only to available Pods

1. list deployments, run kubeclt get deployments, it should show:
 - NAME lists the names of the Deployments in the cluster.
 - READY shows the ratio of CURRENT/DESIRED replicas
 - UP-TO-DATE displays the number of replicas that have been updated to achieve the desired state.
 - AVAILABLE displays how many replicas of the application are available to your users.
 - AGE displays the amount of time that the application has been running
2. to see the replicaset, run kubectl get rs
  - Notice that the name of the ReplicaSet is always formatted as [DEPLOYMENT-NAME]-[RANDOM-STRING]. The random string is randomly    generated and uses the pod-template-hash as a seed.
  Two important columns of this command are:
  - DESIRED displays the desired number of replicas of the application, which you define when you create the Deployment. This is the desired state.
  - CURRENT displays how many replicas are currently running
3. scale the deployment to 4 replicas, kubectl scale followed by the deployment type, name and desired number of instances
kubectl scale deployments/kubernetes-bootcamp --replicas=4
4. list all deployments with get deployments
5. check if the number of pods changed
kubectl get pods -o wide
6. There are 4 Pods now, with different IP addresses. The change was registered in the Deployment events log. To check that, use the describe command
kubectl describe deployments/kubernetes-bootcamp

7. find out the Service
kubectl describe services/kubernetes-bootcamp
8. create an environment variable called NODE_PORT that has a value as the node NODE_PORT
export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
echo NODE_PORT=$NODE_PORT
9. do a curl to the exposed ip and port
curl $(minikube ip):$NODE_PORT

10. to scale down the service to 2 replicas, run the scale command
kubectl scale deployments/kubernetes-bootcamp --replicas=2
11. list the deployments to check
kubectl get deployments
12. list the number of pods
kubectl get pods -o wide
