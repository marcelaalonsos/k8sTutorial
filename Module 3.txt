Viewing Pods and nodes

PODS
- A Pod is a Kubernetes abstraction that represents a group of one or more application containers, and some shared resources for those containers
- those resources include:
  - shared storage, as Volumes
  - Networking, as a unique cluster IP address
  - information about how to run each container

*Containers should only be scheduled together in a single Pod if they are tightly coupled and need to share resources such as disk.*

- A Pod models an application-specific 'logical host' and can contain different application containers which are relatively thighly coupled.
- The containers in a Pod share an IP Address and port space, are always co-located and co-scheduled, and run in a shared context on the same Node
- Pods are the atomic unit on the Kubernetes platform. When we create a Deployment on Kubernetes, that Deployment creates Pods with containers inside them (as opposed to creating containers directly). Each Pod is tied to the Node where it is scheduled, and remains there until termination (according to restart policy) or deletion. In case of a Node failure, identical Pods are scheduled on other available Nodes in the cluster.

Nodes
- A Pod runs on a Node. A Node is a worker machine in kubernetes (virtual or physical). Each Node is managed by the control plane. A node can have multiple pods, and the control plane automatically handles scheduling the pods across the Nodes in the cluster.
- Every node runs:
  - Kubelet: a process responsible for communications between the control plane and the node, it mage the pods and the containers running on a machine
  - A container runtime (Docker) responsible for pulling the container image from a registry, unpacking the container, and running the application.

Troubleshooting with kubectl
- get: list resources
- describe: show detailed information about a resource
- logs: print the logs from a container in a pod
- exec: execute a command on a container in a pod

1. kubectl get pods
2. kubectl describe pods: details about the Podâ€™s container- IP address, the ports used and a list of events related to the lifecycle of the Pod
3. open a new terminal and start the proxy
echo -e "\n\n\n\e[92mStarting Proxy. After starting it will not output a response. e first Terminal Tab\n"; kubectl proxy
4. back to first terminal and get pod name and query the pod
export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
echo Name of the Pod: $POD_NAME
5. see output of application, run a curl request
curl http://localhost:8001/api/v1/namespaces/default/pods/$POD_NAME/proxy/
6. view container logs
kubectl logs $POD_NAME
7. we can execute commands directly on the container once the pod is up and running. let's list the environment variables:
kubectl exec $POD_NAME -- env

*Again, worth mentioning that the name of the container itself can be omitted since we only have a single container in the Pod*

8. start a bash session in the pod's container
kubectl exec -ti $POD_NAME -- bash
9. we have now an open console on the container where we run our NodeJS application. the source code of te app is in the server.js file:
cat server.js
10. check that the application is up by running a curl command
curl localhost:8080
11. close container connection type exit
